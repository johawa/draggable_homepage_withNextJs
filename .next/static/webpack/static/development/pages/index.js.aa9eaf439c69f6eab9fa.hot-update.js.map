{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.aa9eaf439c69f6eab9fa.hot-update.js","sources":["webpack:///./component/Apps/Paint/Paint.js"],"sourcesContent":["import React from \"react\";\r\n//Download Image\r\nimport domtoimage from \"dom-to-image\";\r\nimport saveAs from \"file-saver\";\r\n\r\nimport \"./Paint.css\";\r\n\r\nconst amountCells = 625; //25 * 25\r\n\r\nconst colors = [\r\n  \"rgb(148, 29, 43)\",\r\n  \"rgb(255, 229, 0)\",\r\n  \"rgb(180, 143, 128)\",\r\n  \"rgb(150, 187, 206)\",\r\n  \"rgb(199, 197, 185)\",\r\n  \"rgb(42, 69, 138)\",\r\n  \"rgb(130, 129, 134)\",\r\n  \"rgb(116, 116, 118)\",\r\n  \"rgb(243, 253, 254)\",\r\n  \"rgb(68, 72, 82)\"\r\n];\r\n\r\nvar Cell = props => {\r\n  return <div className={`GridCell cell${props.nr}`} onClick={props.fill} />;\r\n};\r\n\r\nvar Color = props => {\r\n  return (\r\n    <div\r\n      className=\"ColorCell\"\r\n      onClick={props.chooseColor}\r\n      style={{ backgroundColor: props.color, outline: props.choosen }}\r\n    />\r\n  );\r\n};\r\nvar Button = props => {\r\n  return (\r\n    <button className=\"button\" onClick={props.ClickButton}>\r\n      {props.title}\r\n    </button>\r\n  );\r\n};\r\n\r\nclass Paint extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      lenght: new Array(amountCells).fill(0),\r\n      currentColor: \"white\",\r\n      reset: false\r\n    };\r\n  }\r\n\r\n  handleMouseClick(index, event) {\r\n    console.log(event.currentTarget);\r\n    let el = event.currentTarget;\r\n    if (el.style.backgroundColor === this.state.currentColor) {\r\n      el.style.backgroundColor = \"grey\";\r\n    } else {\r\n      el.style.backgroundColor = this.state.currentColor;\r\n    }\r\n  }\r\n\r\n  changeColor(event) {\r\n    let el = event.currentTarget;\r\n    this.setState({\r\n      currentColor: el.style.backgroundColor\r\n    });\r\n  }\r\n\r\n  resteHanlder(event) {\r\n    this.setState({\r\n      reset: true\r\n    });\r\n    const Cells = document.getElementsByClassName(\"GridCell\");\r\n\r\n    let CellsArr = Array.from(Cells);\r\n    CellsArr.forEach(el => {\r\n      el.removeAttribute(\"style\");\r\n    });\r\n  }\r\n\r\n  downloadLink(event) {\r\n    domtoimage\r\n      .toBlob(document.getElementById(\"draw-wrapper\"))\r\n      .then(function(blob) {\r\n        window.saveAs(blob, \"My_Art.png\");\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div id=\"draw-wrapper\">\r\n          <div\r\n            className=\"container\"\r\n            style={{ backgroundColor: this.state.currentColor }}\r\n          >\r\n            {this.state.lenght.map((item, index) => {\r\n              return (\r\n                <Cell\r\n                  key={index}\r\n                  nr={this.state.reset ? `_afterreset_${index}` : index}\r\n                  fill={event => this.handleMouseClick(index, event)}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className=\"colorpicker\">\r\n          {colors.map((clr, index) => {\r\n            return (\r\n              <Color\r\n                key={index}\r\n                color={clr}\r\n                chooseColor={event => this.changeColor(event)}\r\n                choosen={\r\n                  this.state.currentColor === clr ? \"5px solid lime\" : null\r\n                }\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"button-box\">\r\n          <Button\r\n            ClickButton={event => this.resteHanlder(event)}\r\n            title={this.state.reset ? \"RESET\" : \"BEGIN TO DRAW\"}\r\n          />\r\n        </div>\r\n        <div className=\"button-box__save\">\r\n          <Button\r\n            ClickButton={event => this.downloadLink(event)}\r\n            title={\"Download\"}\r\n          />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Paint;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAGA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AA9FA;AACA;AAgGA;;;;A","sourceRoot":""}