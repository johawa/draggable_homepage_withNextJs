{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.f9e8ea0f081688f4dcc3.hot-update.js","sources":["webpack:///./container/OS/OS.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport { DragDropContext } from \"react-dnd\";\r\n\r\nimport { Consumer } from \"../../context\";\r\n//css\r\nimport \"../../css/AppOpenCloseAnimation.css\";\r\nimport \"../../css/AppFrame.css\";\r\n//components\r\nimport Item from \"../../component/DragAndDropLogic/Item\";\r\nimport Board from \"../../component/DragAndDropLogic/DropTarget\";\r\nimport DesktopIcon from \"../../component/DesktopLogic/DesktopIcon/DesktopIcon\";\r\n//assets\r\nimport MyWorkSvg from \"../../static/portfolio.svg\";\r\nimport SpotifySvg from \"../../static/spotify.svg\";\r\nimport PaintSvg from \"../../static/watercolor.svg\";\r\n//App Logic\r\nimport Spotify from \"../../component/Apps/Spotify/Spotify\";\r\nimport MyWork from \"../../component/Apps/MyWork/MyWork\";\r\nimport Paint from \"../../component/Apps/Paint/Paint\";\r\n\r\n//Watch The Order its Important\r\nconst AppIcons = [\r\n  {\r\n    id: 0,\r\n    top: 40,\r\n    left: 40,\r\n    name: \"My Work\",\r\n    highlighted: false,\r\n    SVG: MyWorkSvg\r\n  },\r\n  {\r\n    id: 1,\r\n    top: 190,\r\n    left: 40,\r\n    name: \"Paint.exe\",\r\n    highlighted: false,\r\n    SVG: PaintSvg\r\n  },\r\n  {\r\n    id: 2,\r\n    top: 340,\r\n    left: 40,\r\n    name: \"Spotify.exe\",\r\n    highlighted: false,\r\n    SVG: SpotifySvg\r\n  }\r\n];\r\n\r\nclass Desktop extends Component {\r\n  state = {\r\n    highlightedIconId: null\r\n  };\r\n\r\n  onDrop = item => {\r\n    console.log(item, 'drop');\r\n  };\r\n\r\n  newLoaction = (item, left, top, items, dispatch) => {\r\n    //Update top and left in the state to drag an drop the item,\r\n    // also check if minimized, if so and dragged up again scal big again\r\n    const id = item.id;\r\n    const updatedItems = [...items];\r\n    let ItemToUpdate = updatedItems.find(item => item.id === id);\r\n    if (ItemToUpdate.minimized) {\r\n      ItemToUpdate.scale = 1;\r\n      ItemToUpdate.minimized = false;\r\n    }\r\n\r\n    ItemToUpdate.top = top;\r\n    ItemToUpdate.left = left;\r\n    dispatch({\r\n      type: \"CHANGE_FRAME_POSITION\",\r\n      payload: updatedItems\r\n    });\r\n  };\r\n\r\n  onClickAppFrame(item, items, dispatch) {\r\n    //set State to fucused Frame ID\r\n    const id = item.id;\r\n    const updatedItems = [...items];\r\n    let ItemToUpdate = updatedItems.find(item => item.id === id);\r\n\r\n    dispatch({\r\n      type: \"FOCUS_FRAME\",\r\n      payload: id\r\n    });\r\n  }\r\n\r\n  onClickAppBody(item, items, dispatch) {\r\n    //set State to fucused Frame ID\r\n\r\n    const id = item.id;\r\n    const updatedItems = [...items];\r\n    let ItemToUpdate = updatedItems.find(item => item.id === id);\r\n\r\n    //Check if Item is Minimized, if so, maximize it again, otherwise do nothing\r\n\r\n    if (ItemToUpdate.minimized) {\r\n      ItemToUpdate.minimized = false;\r\n      ItemToUpdate.scale = 1;\r\n      ItemToUpdate.top = 250;\r\n\r\n      dispatch({\r\n        type: \"TOGGLE_FRAME_SIZE_2\",\r\n        payload: updatedItems\r\n      });\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  minimizeItem(item, items, dispatch) {\r\n    //Minimize Button Logic\r\n    const id = item.id;\r\n    const updatedItems = [...items];\r\n    let ItemToUpdate = updatedItems.find(item => item.id === id);\r\n\r\n    const wrapper = document.getElementById(`DesktopWrapper`);\r\n    const windowHeight = wrapper.getBoundingClientRect().height;\r\n    const newPosition = windowHeight - ItemToUpdate.height * 0.65;\r\n\r\n    if (!ItemToUpdate.minimized) {\r\n      ItemToUpdate.minimized = !ItemToUpdate.minimized;\r\n      ItemToUpdate.scale = 0.5;\r\n      ItemToUpdate.top = newPosition;\r\n    } else {\r\n      ItemToUpdate.minimized = !ItemToUpdate.minimized;\r\n      ItemToUpdate.scale = 1;\r\n      ItemToUpdate.top = 200;\r\n    }\r\n\r\n    dispatch({\r\n      type: \"TOGGLE_FRAME_SIZE\",\r\n      payload: updatedItems\r\n    });\r\n  }\r\n\r\n  openApp(item, items, dispatch, value) {\r\n    //Open App of Close it\r\n    const id = item.id;\r\n    value.lastOpenID = id;\r\n    const updatedItems = [...items];\r\n    let ItemToUpdate = updatedItems.find(item => {\r\n      return item.id === id;\r\n    });\r\n    ItemToUpdate.visible = !ItemToUpdate.visible;\r\n    dispatch({\r\n      type: \"OPEN_APP\",\r\n      payload: updatedItems\r\n    });\r\n  }\r\n\r\n  highlightItem(item) {\r\n    this.setState({\r\n      highlightedIconId: item.id\r\n    });\r\n  }\r\n\r\n  render() {\r\n    //Watch The Order its Important\r\n    const Apps = [<MyWork />, <Paint />, <Spotify />];\r\n\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch, items, focusedFrameId } = value;\r\n          return (\r\n            <div className=\"Wrapper\" id=\"DesktopWrapper\">\r\n              {items.map((item, index) => {\r\n                return (\r\n                  <CSSTransition\r\n                    classNames=\"fade\"\r\n                    timeout={{\r\n                      enter: 700,\r\n                      exit: 700\r\n                    }}\r\n                    key={item.id}\r\n                    unmountOnExit\r\n                    mountOnEnter\r\n                    in={item.visible}\r\n                  >\r\n                    <div>\r\n                      <Item\r\n                        focused={focusedFrameId}\r\n                        item={item}\r\n                        minimized={item.minimized}\r\n                        index={index}\r\n                        clickAppFrame={this.onClickAppFrame.bind(\r\n                          this,\r\n                          item,\r\n                          items,\r\n                          dispatch\r\n                        )}\r\n                        clickAppBody={this.onClickAppBody.bind(\r\n                          this,\r\n                          item,\r\n                          items,\r\n                          dispatch\r\n                        )}\r\n                        CloseClick={this.openApp.bind(\r\n                          this,\r\n                          item,\r\n                          items,\r\n                          dispatch\r\n                        )}\r\n                        MinimizeClick={this.minimizeItem.bind(\r\n                          this,\r\n                          item,\r\n                          items,\r\n                          dispatch\r\n                        )}\r\n                        handleDrop={item => this.onDrop(item)}\r\n                      >\r\n                        {\r\n                          //THE APP TO OUTPUT\r\n                          Apps[item.id]\r\n                        }\r\n                      </Item>\r\n                    </div>\r\n                  </CSSTransition>\r\n                );\r\n              })}\r\n\r\n              {AppIcons.map((item, index) => {\r\n                return (\r\n                  <DesktopIcon\r\n                    Click={this.highlightItem.bind(this, item)}\r\n                    DoubleClick={this.openApp.bind(\r\n                      this,\r\n                      item,\r\n                      items,\r\n                      dispatch,\r\n                      value\r\n                    )}\r\n                    highlighted={this.state.highlightedIconId}\r\n                    key={item.id}\r\n                    item={item}\r\n                    index={index}\r\n                  >\r\n                    {item.name}\r\n                  </DesktopIcon>\r\n                );\r\n              })}\r\n              <Board\r\n                moveBox={(item, left, top) =>\r\n                  this.newLoaction(item, left, top, items, dispatch)\r\n                }\r\n              />\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DragDropContext(HTML5Backend)(Desktop);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AASA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;;;;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAMA;AAMA;AAMA;AAAA;AAAA;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiCA;AAMA;AAGA;AAEA;AACA;AAOA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAEA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAGA;;;;AA7MA;AACA;AA+MA;;;;A","sourceRoot":""}