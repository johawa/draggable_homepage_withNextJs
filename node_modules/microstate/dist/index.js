'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connect = exports.Provider = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LocalProvider = function (_React$Component) {
  _inherits(LocalProvider, _React$Component);

  function LocalProvider(props, context) {
    _classCallCheck(this, LocalProvider);

    var _this = _possibleConstructorReturn(this, (LocalProvider.__proto__ || Object.getPrototypeOf(LocalProvider)).call(this, props, context));

    if (!context.setGlobalState) throw new Error('connect(' + _this.props.children.displayName + ') component has been rendered outside Provider context.');
    return _this;
  }

  _createClass(LocalProvider, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.context.setInitialGlobalState(this.props.initialState || {});
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.context.removeGlobalState(this.props.initialState || {});
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          initialState = _props.initialState,
          mapStateToProps = _props.mapStateToProps,
          mapDispatchToProps = _props.mapDispatchToProps,
          children = _props.children;
      var _context = this.context,
          getGlobalState = _context.getGlobalState,
          setGlobalState = _context.setGlobalState,
          getInitialGlobalState = _context.getInitialGlobalState;


      var _state = getGlobalState();
      var state = mapStateToProps ? mapStateToProps(_state) : _state;
      var dispatch = mapDispatchToProps ? mapDispatchToProps(setGlobalState, _state || {}, getInitialGlobalState()) : {};

      var props = _extends({}, children.props, state, dispatch);

      return typeof children === 'function' ? children(props) : _react2.default.cloneElement(children, props);
    }
  }]);

  return LocalProvider;
}(_react2.default.Component);

LocalProvider.displayName = 'LocalProvider';
LocalProvider.contextTypes = {
  setGlobalState: _propTypes2.default.func,
  getGlobalState: _propTypes2.default.func,
  getInitialGlobalState: _propTypes2.default.func,
  setInitialGlobalState: _propTypes2.default.func,
  removeGlobalState: _propTypes2.default.func
};

var Provider = exports.Provider = function (_React$Component2) {
  _inherits(Provider, _React$Component2);

  function Provider(props) {
    _classCallCheck(this, Provider);

    var _this2 = _possibleConstructorReturn(this, (Provider.__proto__ || Object.getPrototypeOf(Provider)).call(this, props));

    _this2.state = {};

    _this2.ready = false;
    _this2.initial = {};
    return _this2;
  }

  _createClass(Provider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var _ = this;

      return {
        setInitialGlobalState: function setInitialGlobalState(state) {
          _.initial = Object.assign(_.state, state);
        },
        setGlobalState: function setGlobalState(state, cb) {
          _.setState(state, function () {
            _.ready = true;

            cb && cb();
          });
        },
        getGlobalState: function getGlobalState() {
          return _.state;
        },
        getInitialGlobalState: function getInitialGlobalState() {
          return _.initial;
        },
        removeGlobalState: function removeGlobalState(state) {
          var keys = Object.keys(state).forEach(function (key) {
            delete _.state[key];
          });

          _.setState(_.state);
        }
      };
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.Children.only(this.props.children);
    }
  }]);

  return Provider;
}(_react2.default.Component);

Provider.displayName = 'Provider';
Provider.childContextTypes = {
  setGlobalState: _propTypes2.default.func,
  getGlobalState: _propTypes2.default.func,
  getInitialGlobalState: _propTypes2.default.func,
  setInitialGlobalState: _propTypes2.default.func,
  removeGlobalState: _propTypes2.default.func
};
var connect = exports.connect = function connect(mapStateToProps, mapDispatchToProps, initialState) {
  return function (Comp) {
    return function (props) {
      return _react2.default.createElement(
        LocalProvider,
        {
          initialState: initialState,
          mapStateToProps: mapStateToProps,
          mapDispatchToProps: mapDispatchToProps },
        _react2.default.createElement(Comp, props)
      );
    };
  };
};